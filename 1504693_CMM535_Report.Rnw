\documentclass[10pt  ,usenames, dvipsnames]{article}
\usepackage{graphicx, verbatim}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amscd}
\usepackage{lipsum}
\usepackage{todonotes}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{caption}
\usepackage{listings}
\usepackage{color}
\setlength{\textwidth}{6.5in} 
\setlength{\textheight}{9in}
\setlength{\oddsidemargin}{0in} 
\setlength{\evensidemargin}{0in}
\setlength{\topmargin}{-1.5cm}
\setlength{\parindent}{0cm}
\usepackage{setspace}
\usepackage{float}
\usepackage{amssymb}
\usepackage[utf8]{inputenc}
\usepackage{fancyhdr}
\usepackage{tabularx}
\usepackage{lmodern} % for bold teletype font
\usepackage{minted}

\usepackage{hyperref}
\hypersetup{
  colorlinks   = true, %Colours links instead of ugly boxes
  urlcolor     = blue, %Colour for external hyperlinks
  linkcolor    = blue, %Colour of internal links
  citecolor   = red %Colour of citations
}

%\fancyhf{}
\rfoot{Andrew Tait \thepage}
\singlespacing
\usepackage[affil-it]{authblk} 
\usepackage{etoolbox}
\usepackage{lmodern}

% Notice the following package, it will help you cite papers
\usepackage[backend=bibtex ,sorting=none]{biblatex}
\bibliography{references}




\begin{document}


\title{\LARGE Coursework  \\ Data Science Development (CMM535)}

\author{Andrew Tait, \textit{\href{1504693@rgu.ac.uk}{1504693@rgu.ac.uk}}}
\maketitle
% \begin{flushleft} \today \end{flushleft} 
\noindent\rule{16cm}{0.4pt}
%\underline{\hspace{3cm}
\ \\
%\thispagestyle{empty}



\section {Data Exploration}



\subsection{Dataset Choice}
The dataset that has been chosen for this part of the coursework is Mushroom. This is available on the UCI repository. The set was chosen because of it's adequate instance size and number of attributes.

.


\subsection{Problem Statement and Data Exploration}


The main purpose of the Mushroom dataset is to identify which characteristics (attributes) determine if a particular mushroom species is editable or poisonous.

Therefore the aim of this assignment is to build a predictive model to predict if a certain type of Mushroom is ediable or not.


To start off the data explortation I will first import the required librarys.

<<warning=FALSE,eval=FALSE,comment=FALSE>>=
#Import packages
library(randomForest)  
library(e1071)  
library(caret)  
library(ggplot2) 
library(gridExtra)
library(caret)
library(rpart.plot)
library(RColorBrewer)
library(plyr)
@

<<warning=FALSE,echo=FALSE, comment=FALSE, message=FALSE>>==
#Import packages
library(randomForest)  
library(e1071)  
library(caret)  
library(ggplot2) 
library(gridExtra)
library(caret)
library(rpart.plot)
library(RColorBrewer)
library(plyr)
@


Then set the working directory to the Coursework project folder path:
<<eval=FALSE,comment=TRUE>>=
setwd("~/CMM535 Data Science Development/Coursework/CMM535_Coursework")
@

<<warning=FALSE,echo=FALSE, comment=FALSE, message=FALSE>>==
setwd("~/CMM535 Data Science Development/Coursework/CMM535_Coursework")
@

In order to import the dataset, I used a third party helper function, which can be viewed at Figure .
The helper function not only set the attributes names but the instances names as well. Since all the data is represented a single character, it converts them into their string equivalent.


<<eval=FALSE,comment=TRUE>>=
#helper function
source('helper_functions.r')

#Import datasets using helper function

mushroom <- fetchAndCleanData()
@


<<warning=FALSE,echo=FALSE>>==
#helper function
source('helper_functions.r')

#Import datasets using helper function

mushroom <- fetchAndCleanData()
@


Now that the dataset is imported, it is time to do some data exploration and analysis.

Number of rows in the dataset:

<<eval=FALSE,comment=TRUE>>=
#Number of rows in the dataset
nrow(mushroom)

@


<<warning=FALSE,echo=FALSE>>==

#Number of columns in the dataset
nrow(mushroom)

@

Number of columns (features) in the dataset:

<<eval=FALSE,comment=TRUE>>==
ncol(mushroom)

@


<<warning=FALSE,echo=FALSE>>==
ncol(mushroom)

@

Summary of the Mushroom dataset:

<<eval=FALSE,comment=TRUE>>==
#Summary of the Mushroom dataset
str(mushroom)

@


<<warning=FALSE,echo=FALSE>>==
str(mushroom)

@

Now that some basic data exploration is covered, next to inspect the dataset a bit further. Starting with the class (Edible) distribution in the mushroom dataset, see (Figure~\ref{fig1})

<<warning=FALSE,eval=FALSE,comment=TRUE>>==
#Class Distribution
barplot(table(mushroom$Edible))
@
\begin{figure}[H]
\begin{center}
<<warning=FALSE,echo=FALSE,fig.height=4.5,out.width=".76\\linewidth">>=
barplot(table(mushroom$Edible))
@
\caption {Barplot of Class Distribution}
\label{fig1}
\end {center}
\end {figure}

Next is to analyse if there is a correlocation between the CapShape and CapSurface of a mushroom and whether it is Edible or Poisonous. Which is shown in the plot ((Figure~\ref{fig2}))below.

<<warning=FALSE,eval=FALSE,comment=TRUE>>==

#Comparisons of CapShape and CapSurface with Edible or Poisonous
ggplot(mushroom,aes(x=CapShape, y=CapSurface, color=Edible)) + 
                       geom_jitter(alpha=0.3) +
                       scale_color_manual(breaks = c('Edible','Poisonous'), 
                                          values=c('darkgreen','red'))
                                                                                  

@

\begin{figure}[H]
\begin{center}
<<warning=FALSE,echo=FALSE,fig.height=4.5,out.width=".76\\linewidth">>=

ggplot(mushroom,aes(x=CapShape, y=CapSurface, color=Edible)) + 
                       geom_jitter(alpha=0.3) +
                       scale_color_manual(breaks = c('Edible','Poisonous'), 
                                          values=c('darkgreen','red'))
                                                                                
@
\caption {Comparisons of CapShape and CapSurface with Edible or Poisonous in Mushroom Dataset}
\label{fig2}
\end {center}
\end {figure}

<<warning=FALSE,eval=FALSE,comment=TRUE>>==

#Comparisons of StalkSurfaceAboveRing and StalkSurfaceBelowRing with Edible or Poisionous
ggplot(mushroom,aes(x=StalkSurfaceAboveRing, y=StalkSurfaceBelowRing, color=Edible)) + 
  geom_jitter(alpha=0.3) +
  scale_color_manual(breaks = c('Edible','Poisonous'), values=c('darkgreen','red'))          

@

\begin{figure}[H]
\begin{center}
<<warning=FALSE,echo=FALSE,fig.height=4.5,out.width=".76\\linewidth">>=

#Comparisons of StalkSurfaceAboveRing and StalkSurfaceBelowRing with Edible or Poisionous
ggplot(mushroom,aes(x=StalkSurfaceAboveRing, y=StalkSurfaceBelowRing, color=Edible)) + 
  geom_jitter(alpha=0.3) +
  scale_color_manual(breaks = c('Edible','Poisonous'), values=c('darkgreen','red'))
                                                                                
@
\caption {Comparisons of StalkSurfaceAboveRing and StalkSurfaceBelowRing with Edible or Poisionous}
\label{fig3}
\end {center}
\end {figure}



\clearpage

\subsection {Pre-Processing}

Before the Mushroom dataset can be processed by a classification model(s), some pre-processing is required.

While the helper function should take out all missing values, lets valdiate this before continuing.

<<warning=FALSE,eval=FALSE,comment=TRUE>>==
#Class Distribution
table(complete.cases (mushroom))
@


<<warning=FALSE,echo=FALSE>>=
#Class Distribution
table(complete.cases (mushroom))
@

As shown above, there is not any missing values in the dataset.

The class (Edible) on the Mushroom dataset is then converted to a factor, this is due to way that certain classification models interact with the class feature of a dataset.


<<warning=FALSE,eval=FALSE,comment=TRUE>>==
#Class Distribution
mushroom$Edible <- as.factor(mushroom$Edible)
@


<<warning=FALSE,echo=FALSE>>=
#Class Distribution
mushroom$Edible <- as.factor(mushroom$Edible)
@


\clearpage



\section {Modeling and Classifcation}



\subsection {Divide into training and testing subset}

When it came to dividing the mushroom dataset into training and testing subsets, I decided to go with the conventional 70 percent
training and 30 percent testing split as a starting point/baseline.

<<warning=FALSE,eval=FALSE,comment=TRUE>>==
#Divide the datset into 70% training and 30% testing.
inTrain <- createDataPartition(y=mushroom$Edible, p=0.7, list=FALSE)

#Assign indexes to split the Mushroom dataset into training and testing
training <- mushroom[inTrain,]
testing <- mushroom[-inTrain,]
@

<<warning=FALSE,echo=FALSE>>=
#Divide the datset into 70% training and 30% testing.
inTrain <- createDataPartition(y=mushroom$Edible, p=0.7, list=FALSE)

#Assign indexes to split the Mushroom dataset into training and testing
training <- mushroom[inTrain,]
testing <- mushroom[-inTrain,]
@



\subsection{Build Classifier}





\subsection{Improve Model Performance}



\clearpage



\section{Fine-grained Model}


\subsection{Clustering Dataset}

<<warning=FALSE,echo=FALSE>>=
normalizeData <- function (x ) {
return ( (x-min(x) ) / ( max(x)- min(x) ))
}



dfNew <- mushroom
dfNew$VeilType <- NULL

dfNew[,2:22] = lapply(dfNew[,2:22], as.numeric)


dfN <- as.data.frame(lapply(dfNew[,-1], normalizeData))
@


\subsection{Adapting your Model}







% Clear the page and starte a new page for references 

\clearpage
% The title for the reference section is called References 

\section{Appendix}\label{pubs}

\subsection{Mushroom Dataset Helper Function}

I used a helper function to import the dataset, it helps with assigning the correct column and row names to the dataset. It also removes any missing values from the dateset.


\lstset{ 
  language=R,                     % the language of the code
  basicstyle=\tiny\ttfamily, % the size of the fonts that are used for the code
  stepnumber=1,                   % the step between two line-numbers. If it is 1, each line
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
 keywordstyle=\color{RoyalBlue},      % keyword style
  commentstyle=\color{YellowGreen},   % comment style
  stringstyle=\color{ForestGreen}      % string literal style
} 



\begin{figure}[H]
\caption {fetchAndCleanData Function for Mushroom dataset}
\end {figure}
    \begin{lstlisting}
fetchAndCleanData = function(){
  
  # All of this code is from
  # https://rstudio-pubs-static.s3.amazonaws.com/125760_358e4a6802c94fa29e2a9ab49f45df94.html
  
  mushrooms = read.table("data/agaricus-lepiota.data", header = FALSE, sep = ",")
  
  
  
  #create a data frame with only the required columns
  shrooms = mushrooms
  
  #column names are added
  colnames(shrooms) = c("Edible",
                        "CapShape",
                        "CapSurface",
                        "CapColor",
                        "Bruises",                        
                        "Odor",
                        "GillAttachment",
                        "GillSpacing",
                        "GillSize",
                        "GillColor",
                        "StalkShape",
                        "StalkRoot",
                        "StalkSurfaceAboveRing",
                        "StalkSurfaceBelowRing",
                        "StalkColorAboveRing",
                        "StalkColorBelowRing",
                        "VeilType",
                        "VeilColor",
                        "RingNumber",
                        "RingType",
                        "SporePrintColor",
                        "Population",
                        "Habitat")
  
  
  #Edible
  shrooms$Edible = as.character(shrooms$Edible)
  shrooms$Edible[shrooms$Edible == "e"] = "Edible"
  shrooms$Edible[shrooms$Edible == 'p'] = "Poisonous"
  shrooms$Edible = factor(shrooms$Edible)
  
  
  # Edible
  #levels(shrooms$Edible) = c(levels(shrooms$Edible), c("Poisonous","Edible"))
  #shrooms$Edible[shrooms$Edible == "p"] = "Poisonous"
  #shrooms$Edible[shrooms$Edible == "e"] = "Edible"
  
  #CapShape
  levels(shrooms$`CapShape`) = c(levels(shrooms$`CapShape`), c("Bell","Conical","Convex","Flat","Knobbed","Sunken"))
  shrooms$`CapShape`[shrooms$`CapShape` == "b"] = "Bell"
  shrooms$`CapShape`[shrooms$`CapShape` == "c"] = "Conical"
  shrooms$`CapShape`[shrooms$`CapShape` == "x"] = "Convex"
  shrooms$`CapShape`[shrooms$`CapShape` == "f"] = "Flat"
  shrooms$`CapShape`[shrooms$`CapShape` == "k"] = "Knobbed"
  shrooms$`CapShape`[shrooms$`CapShape` == "s"] = "Sunken"
  
  #CapSurface
  levels(shrooms$`CapSurface`) = c(levels(shrooms$`CapSurface`), c("Fibrous", "Grooves", "Scaly", "Smooth"))
  shrooms$`CapSurface`[shrooms$`CapSurface` == "f"] = "Fibrous"
  shrooms$`CapSurface`[shrooms$`CapSurface` == "g"] = "Grooves"
  shrooms$`CapSurface`[shrooms$`CapSurface` == "y"] = "Scaly"
  shrooms$`CapSurface`[shrooms$`CapSurface` == "s"] = "Smooth"
  
  #CapColor
  levels(shrooms$`CapColor`) = c(levels(shrooms$`CapColor`), c("Brown", "Buff", "Cinnamon", "Gray", "Green", "Pink", "Purple", "Red", "White", "Yellow"))
  shrooms$`CapColor`[shrooms$`CapColor` == "n"] = "Brown"
  shrooms$`CapColor`[shrooms$`CapColor` == "b"] = "Buff"
  shrooms$`CapColor`[shrooms$`CapColor` == "c"] = "Cinnamon"
  shrooms$`CapColor`[shrooms$`CapColor` == "g"] = "Gray"
  shrooms$`CapColor`[shrooms$`CapColor` == "r"] = "Green"
  shrooms$`CapColor`[shrooms$`CapColor` == "p"] = "Pink"
  shrooms$`CapColor`[shrooms$`CapColor` == "u"] = "Purple"
  shrooms$`CapColor`[shrooms$`CapColor` == "e"] = "Red"
  shrooms$`CapColor`[shrooms$`CapColor` == "w"] = "White"
  shrooms$`CapColor`[shrooms$`CapColor` == "y"] = "Yellow"
  
  # Bruises
  levels(shrooms$Bruises) = c(levels(shrooms$Bruises), c("True","False"))
  shrooms$Bruises[shrooms$Bruises == "t"] = "True"
  shrooms$Bruises[shrooms$Bruises == "f"] = "False"
  
  #Odor
  levels(shrooms$Odor) = c(levels(shrooms$Odor), c("Almond", "Anise", "Creosote", "Fishy", "Foul", "Musty", "None", "Pungent", "Spicy"))
  shrooms$Odor[shrooms$Odor == "a"] = "Almond"
  shrooms$Odor[shrooms$Odor == "l"] = "Anise"
  shrooms$Odor[shrooms$Odor == "c"] = "Creosote"
  shrooms$Odor[shrooms$Odor == "y"] = "Fishy"
  shrooms$Odor[shrooms$Odor == "f"] = "Foul"
  shrooms$Odor[shrooms$Odor == "m"] = "Musty"
  shrooms$Odor[shrooms$Odor == "n"] = "None"
  shrooms$Odor[shrooms$Odor == "p"] = "Pungent"
  shrooms$Odor[shrooms$Odor == "s"] = "Spicy"
  
  # GillAttachment
  levels(shrooms$GillAttachment) = c(levels(shrooms$GillAttachment), c("Attached","Descending","Free","Notched"))
  shrooms$GillAttachment[shrooms$GillAttachment == "a"] = "Attached"
  shrooms$GillAttachment[shrooms$GillAttachment == "d"] = "Descending"
  shrooms$GillAttachment[shrooms$GillAttachment == "f"] = "Free"
  shrooms$GillAttachment[shrooms$GillAttachment == "n"] = "Notched"
  
  # GillSpacing
  levels(shrooms$GillSpacing) = c(levels(shrooms$GillSpacing), c("Close","Crowded","Distant"))
  shrooms$GillSpacing[shrooms$GillSpacing == "c"] = "Close"
  shrooms$GillSpacing[shrooms$GillSpacing == "w"] = "Crowded"
  shrooms$GillSpacing[shrooms$GillSpacing == "d"] = "Distant"
  
  # GillSize
  levels(shrooms$GillSize) = c(levels(shrooms$GillSize), c("Broad","Narrow"))
  shrooms$GillSize[shrooms$GillSize == "b"] = "Broad"
  shrooms$GillSize[shrooms$GillSize == "n"] = "Narrow"
  
  # GillColor
  levels(shrooms$GillColor) = c(levels(shrooms$GillColor), c("Black","Brown","Buff","Chocolate","Gray","Green","Orange","Pink","Purple","Red","White","Yellow"))
  shrooms$GillColor[shrooms$GillColor == "k"] = "Black"
  shrooms$GillColor[shrooms$GillColor == "n"] = "Brown"
  shrooms$GillColor[shrooms$GillColor == "b"] = "Buff"
  shrooms$GillColor[shrooms$GillColor == "h"] = "Chocolate"
  shrooms$GillColor[shrooms$GillColor == "g"] = "Gray"
  shrooms$GillColor[shrooms$GillColor == "r"] = "Green"
  shrooms$GillColor[shrooms$GillColor == "o"] = "Orange"
  shrooms$GillColor[shrooms$GillColor == "p"] = "Pink"
  shrooms$GillColor[shrooms$GillColor == "u"] = "Purple"
  shrooms$GillColor[shrooms$GillColor == "e"] = "Red"
  shrooms$GillColor[shrooms$GillColor == "w"] = "White"
  shrooms$GillColor[shrooms$GillColor == "y"] = "Yellow"
  
  # StalkShape
  levels(shrooms$StalkShape) = c(levels(shrooms$StalkShape), c("Enlarging","Tapering"))
  shrooms$StalkShape[shrooms$StalkShape == "e"] = "Enlarging"
  shrooms$StalkShape[shrooms$StalkShape == "t"] = "Tapering"
  
  # StalkRoot
  levels(shrooms$StalkRoot) = c(levels(shrooms$StalkRoot), c("Bulbous","Club","Cup","Equal","Rhizomorphs","Rooted","Missing"))
  shrooms$StalkRoot[shrooms$StalkRoot == "b"] = "Bulbous"
  shrooms$StalkRoot[shrooms$StalkRoot == "c"] = "Club"
  shrooms$StalkRoot[shrooms$StalkRoot == "u"] = "Cup"
  shrooms$StalkRoot[shrooms$StalkRoot == "e"] = "Equal"
  shrooms$StalkRoot[shrooms$StalkRoot == "z"] = "Rhizomorphs"
  shrooms$StalkRoot[shrooms$StalkRoot == "r"] = "Rooted"
  shrooms$StalkRoot[shrooms$StalkRoot == "?"] = "Missing"
  
  # StalkSurfaceAboveRing
  levels(shrooms$StalkSurfaceAboveRing) = c(levels(shrooms$StalkSurfaceAboveRing), c("Fibrous","Scaly","Silky","Smooth"))
  shrooms$StalkSurfaceAboveRing[shrooms$StalkSurfaceAboveRing == "f"] = "Fibrous"
  shrooms$StalkSurfaceAboveRing[shrooms$StalkSurfaceAboveRing == "y"] = "Scaly"
  shrooms$StalkSurfaceAboveRing[shrooms$StalkSurfaceAboveRing == "k"] = "Silky"
  shrooms$StalkSurfaceAboveRing[shrooms$StalkSurfaceAboveRing == "s"] = "Smooth"
  
  # StalkSurfaceBelowRing
  levels(shrooms$StalkSurfaceBelowRing) = c(levels(shrooms$StalkSurfaceBelowRing), c("Fibrous","Scaly","Silky","Smooth"))
  shrooms$StalkSurfaceBelowRing[shrooms$StalkSurfaceBelowRing == "f"] = "Fibrous"
  shrooms$StalkSurfaceBelowRing[shrooms$StalkSurfaceBelowRing == "y"] = "Scaly"
  shrooms$StalkSurfaceBelowRing[shrooms$StalkSurfaceBelowRing == "k"] = "Silky"
  shrooms$StalkSurfaceBelowRing[shrooms$StalkSurfaceBelowRing == "s"] = "Smooth"
  
  # StalkColorAboveRing
  levels(shrooms$StalkColorAboveRing) = c(levels(shrooms$StalkColorAboveRing), c("Brown","Buff","Cinnamon","Gray","Orange","Pink","Red","White","Yellow"))
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "n"] = "Brown"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "b"] = "Buff"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "c"] = "Cinnamon"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "g"] = "Gray"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "o"] = "Orange"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "p"] = "Pink"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "e"] = "Red"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "w"] = "White"
  shrooms$StalkColorAboveRing[shrooms$StalkColorAboveRing == "y"] = "Yellow"
  
  
  # StalkColorBelowRing
  levels(shrooms$StalkColorBelowRing) = c(levels(shrooms$StalkColorBelowRing), c("Brown","Buff","Cinnamon","Gray","Orange","Pink","Red","White","Yellow"))
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "n"] = "Brown"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "b"] = "Buff"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "c"] = "Cinnamon"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "g"] = "Gray"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "o"] = "Orange"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "p"] = "Pink"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "e"] = "Red"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "w"] = "White"
  shrooms$StalkColorBelowRing[shrooms$StalkColorBelowRing == "y"] = "Yellow"
  
  # VeilType
  levels(shrooms$VeilType) = c(levels(shrooms$VeilType), c("Partial","Universal"))
  shrooms$VeilType[shrooms$VeilType == "p"] = "Partial"
  shrooms$VeilType[shrooms$VeilType == "u"] = "Universal"
  
  # VeilColor
  levels(shrooms$VeilColor) = c(levels(shrooms$VeilColor), c("Brown","Orange","White","Yellow"))
  shrooms$VeilColor[shrooms$VeilColor == "n"] = "Brown"
  shrooms$VeilColor[shrooms$VeilColor == "o"] = "Orange"
  shrooms$VeilColor[shrooms$VeilColor == "w"] = "White"
  shrooms$VeilColor[shrooms$VeilColor == "y"] = "Yellow"
  
  # RingNumber
  levels(shrooms$RingNumber) = c(levels(shrooms$RingNumber), c("None","One","Two"))
  shrooms$RingNumber[shrooms$RingNumber == "n"] = "None"
  shrooms$RingNumber[shrooms$RingNumber == "o"] = "One"
  shrooms$RingNumber[shrooms$RingNumber == "t"] = "Two"
  
  # RingType
  levels(shrooms$RingType) = c(levels(shrooms$RingType), c("Cobwebby","Evanescent","Flaring","Large","None","Pendant","Sheathing","Zone"))
  shrooms$RingType[shrooms$RingType == "c"] = "Cobwebby"
  shrooms$RingType[shrooms$RingType == "e"] = "Evanescent"
  shrooms$RingType[shrooms$RingType == "f"] = "Flaring"
  shrooms$RingType[shrooms$RingType == "l"] = "Large"
  shrooms$RingType[shrooms$RingType == "n"] = "None"
  shrooms$RingType[shrooms$RingType == "p"] = "Pendant"
  shrooms$RingType[shrooms$RingType == "s"] = "Sheathing"
  shrooms$RingType[shrooms$RingType == "z"] = "Zone"
  
  # SporePrintColor
  levels(shrooms$SporePrintColor) = c(levels(shrooms$SporePrintColor), c("Black","Brown","Buff","Chocolate","Green","Orange","Purple","White","Yellow"))
  shrooms$SporePrintColor[shrooms$SporePrintColor == "k"] = "Black"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "n"] = "Brown"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "b"] = "Buff"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "h"] = "Chocolate"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "r"] = "Green"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "o"] = "Orange"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "u"] = "Purple"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "w"] = "White"
  shrooms$SporePrintColor[shrooms$SporePrintColor == "y"] = "Yellow"
  
  # Population
  levels(shrooms$Population) = c(levels(shrooms$Population), c("Abundnant","Clustered","Numerous","Scattered","Several","Solitary"))
  shrooms$Population[shrooms$Population == "a"] = "Abundnant"
  shrooms$Population[shrooms$Population == "c"] = "Clustered"
  shrooms$Population[shrooms$Population == "n"] = "Numerous"
  shrooms$Population[shrooms$Population == "s"] = "Scattered"
  shrooms$Population[shrooms$Population == "v"] = "Several"
  shrooms$Population[shrooms$Population == "y"] = "Solitary"
  
  # Habitat
  levels(shrooms$Habitat) = c(levels(shrooms$Habitat), c("Grasses","Leaves","Meadows","Paths","Urban","Waste","Woods"))
  shrooms$Habitat[shrooms$Habitat == "g"] = "Grasses"
  shrooms$Habitat[shrooms$Habitat == "l"] = "Leaves"
  shrooms$Habitat[shrooms$Habitat == "m"] = "Meadows"
  shrooms$Habitat[shrooms$Habitat == "p"] = "Paths"
  shrooms$Habitat[shrooms$Habitat == "u"] = "Urban"
  shrooms$Habitat[shrooms$Habitat == "w"] = "Waste"
  shrooms$Habitat[shrooms$Habitat == "d"] = "Woods"
  
  return(shrooms)
}
\end{lstlisting}
\label{figHelper}


\clearpage

\begin{figure}[H]
\caption {clustData function for clustering Mushroom dataset}
\end {figure}
    \begin{lstlisting}
    #Clustering Function
clustData <- function (df,ClassIndex,kmeansClasses = rep(0,unique(df[,ClassIndex]))) {
  # use split function to split the dataset according to the class label
  # a set of dataframes each representing a class label will be stored
  # in dfs list()
  dfs <- split (df, df[,ClassIndex])
  # create empty list
  clustList <- list()
  n <- length(dfs)
  for (i in 1:length(kmeansClasses)){
    # Cluster according to all features excluding the label
    if (kmeansClasses[i]>1 & kmeansClasses[i]< nrow(dfs[[i]])){
      clustList[[i]] <- kmeans(dfs[[i]][,-ClassIndex],kmeansClasses[i])
      #plotcluster(clustList[[i]], clustList[[i]]$cluster)
      dfs[[i]]$cluster <- paste0((dfs[[i]][,ClassIndex]),
                                 "_","c",clustList[[i]]$cluster)
    }
    else {
      dfs[[i]]$cluster = paste0((dfs[[i]][,ClassIndex]),
                                "_c0")
    }
  }
  # put all list elements in a dataframe and return it
  # note that ldply() require the library plyr
  allClusteredElements <- ldply (dfs, data.frame)
  # drop the first column 'id' resulting from ldply
  allClusteredElements <- allClusteredElements[,-1]
  allClusteredElements <- allClusteredElements[,-ClassIndex]
  return(allClusteredElements)
}
\end{lstlisting}
\label{figCluster}

% Clear the page and starte a new page for references 

\clearpage
% The title for the reference section is called References 

\section{References}\label{pubs}

\printbibliography[heading =none]


\clearpage


\end{document}
